xplot = seq(0, 10, by = 0.1)
set.seed(1234)
x = seq(0, 10)
y = 3 + x + 4 * x ^ 2 + rnorm(11, 0, 20)
plot(x, y, ylim = c(-300, 400), cex = 2, pch = 20)
fit = lm(y ~ x + I(x ^ 2))
#summary(fit)
fit_perf = lm(y ~ x + I(x ^ 2) + I(x ^ 3) + I(x ^ 4) + I(x ^ 5) + I(x ^ 6)
+ I(x ^ 7) + I(x ^ 8) + I(x ^ 9) + I(x ^ 10))
summary(fit_perf)
```
```{r}
xplot = seq(0, 10, by = 0.1)
lines(xplot, predict(fit, newdata = data.frame(x = xplot)),
col = "dodgerblue", lwd = 2, lty = 1)
lines(xplot, predict(fit_perf, newdata = data.frame(x = xplot)),
col = "darkorange", lwd = 2, lty = 2)
xplot = seq(0, 10, by = 0.1)
lines(xplot, predict(fit, newdata = data.frame(x = xplot)),
col = "dodgerblue", lwd = 2, lty = 1)
lines(xplot, predict(fit_perf, newdata = data.frame(x = xplot)),
col = "darkorange", lwd = 2, lty = 2)
xplot = seq(0, 10, by = 0.1)
lines(xplot, predict(fit, newdata = data.frame(x = xplot)),
col = "dodgerblue", lwd = 2, lty = 1)
lines(xplot, predict(fit_perf, newdata = data.frame(x = xplot)),
col = "darkorange", lwd = 2, lty = 2)
initech = read.csv("initech.csv")
plot(salary~ years, data= initech, col="grey", pch=20, cex=1.5, main = "Salaries at Initech, by Seniority")
initech_fit = lm(salary ~ years, data= initech)
summary(initech_fit)
plot(salary~years, data= initech, col="grey", pch=20, cex=1.5, main ="Salaries at Initech")
abline(initech_fit, col="darkorange", lwd=2)
par(mfrow= c(1,2))
plot(fitted(initech_fit), resid(initech_fit), col="grey", pch=20, xlab="Fitted", ylab="Residuals", main= " Fitted versus Residuals")
abline(h=0, col="darkorange", lwd=2)
qqnorm(resid(initech_fit), main="Normal Q-Q Plot", col= "darkgrey")
qqline(resid(initech_fit), col ="dodgerblue", lwd=2)
initech_fit_log = lm(log(salary)~years, data=initech)
plot(log(salary)~ years, data=initech, col = "grey", pch =20, cex = 1.5, main ="Salaries at Initech, By Seniority")
abline(initech_fit_log, col="darkorange", lwd=2)
plot(salary~years, data= initech, col="grey", pch = 20, cex = 1.5, main = "Salaries at Initech, By Seniority")
curve(exp(initech_fit_log$coef[1] + initech_fit_log$coef[2]*x), from = 0, to = 30, add= TRUE, col ="darkorange", lwd=2)
par(mfrow = c(1, 2))
plot(fitted(initech_fit_log), resid(initech_fit_log), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(resid(initech_fit_log), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(initech_fit_log), col = "dodgerblue", lwd = 2)
sqrt(mean(resid(initech_fit)^2))
sqrt(mean((initech$salary - exp(fitted(initech_fit_log))) ^ 2))
library(MASS)
library(faraway)
savings_model = lm(sr~., data=savings)
boxcox(savings_model, plotit=TRUE)
boxcox(savings_model, plotit=TRUE, lambda = seq(0.5, 1.5, by=0.1))
plot(fitted(savings_model), resid(savings_model), col = "dodgerblue",
pch = 20, cex = 1.5, xlab = "Fitted", ylab = "Residuals")
abline(h = 0, lty = 2, col = "darkorange", lwd = 2)
library(lmtest)
bptest(savings_model)
shapiro.test(resid(savings_model))
gala_model = lm(Species ~ Area + Elevation + Nearest + Scruz + Adjacent, data = gala)
plot(fitted(gala_model), resid(gala_model), col = "dodgerblue",
pch = 20, cex = 1.5, xlab = "Fitted", ylab = "Residuals")
abline(h = 0, lty = 2, col = "darkorange", lwd = 2)
boxcox(gala_model, lambda = seq(-0.25, 0.75, by = 0.05), plotit = TRUE)
# lambda = 0.3
gala_model_cox = lm((((Species^0.3)-1)/0.3 )~Area + Elevation + Nearest + Scruz + Adjacent, data = gala )
plot(fitted(gala_model_cox), resid(gala_model_cox), col = "dodgerblue",
pch = 20, cex = 1.5, xlab = "Fitted", ylab = "Residuals")
abline(h = 0, lty = 2, col = "darkorange", lwd = 2)
autompg = read.csv("auto-mpg.csv")
colnames(autompg)[-1]<-c("cyl", "disp","hp","wt","acc","year", "origin", "domestic")
autompg$hp<- as.numeric(autompg$hp)
str(autompg)
par(mfrow= c(1,2))
mpg_hp = lm(mpg~hp, data=autompg)
plot(mpg~hp, data=autompg, col= "dodgerblue", pch = 20, cex= 1.5)
abline(mpg_hp, col = "darkorange", lwd=2)
plot(fitted(mpg_hp), resid(mpg_hp), col="dodgerblue" , pch = 20, cex=1.5,
xlab= "Fitted", ylab="Residuals")
abline(h=0, lty=2, col="darkorange", lwd= 2)
marketing = read.csv("marketing.csv")
plot(sales ~ advert, data = marketing,
xlab = "Advert Spending (in $100,00)", ylab = "Sales (in $100,00)",
pch = 20, cex = 2, col="grey")
mark_mod = lm(sales~ advert, data= marketing)
summary(mark_mod)
mark_mod_poly2 = lm(sales~ advert+ I(advert^2), data= marketing)
summary(mark_mod_poly2)
n = length(marketing$advert)
X = cbind(rep(1, n), marketing$advert, marketing$advert ^ 2)
solve(t(X) %*% X) %*% t(X) %*% marketing$sales
mark_mod_poly3 = lm(sales ~ advert + I(advert ^ 2) + I(advert ^ 3), data = marketing)
summary(mark_mod_poly3)
plot(sales ~ advert, data = marketing,
xlab = "Advert Spending (in $100,00)", ylab = "Sales (in $100,00)",
pch = 20, cex = 2)
abline(mark_mod, lty = 2, col = "green", lwd = 2)
xplot = seq(0, 16, by = 0.01)
lines(xplot, predict(mark_mod_poly2, newdata = data.frame(advert = xplot)),
col = "blue", lwd = 2)
lines(xplot, predict(mark_mod_poly3, newdata = data.frame(advert = xplot)),
col = "red", lty = 3, lwd = 3)
library(ggplot2)
ggplot(data= marketing, aes(x= advert, y=sales)) +
stat_smooth(method = "lm", se = FALSE, color = "green", formula = y ~ x) +
stat_smooth(method = "lm", se = FALSE, color = "blue", formula = y ~ x + I(x ^ 2)) +
stat_smooth(method = "lm", se = FALSE, color = "red", formula = y ~ x + I(x ^ 2)+ I(x ^ 3)) +
geom_point(colour = "black", size = 3)
set.seed(1234)
x = seq(0, 10)
y = 3 + x + 4 * x ^ 2 + rnorm(11, 0, 20)
plot(x, y, ylim = c(-300, 400), cex = 2, pch = 20)
fit = lm(y ~ x + I(x ^ 2))
#summary(fit)
fit_perf = lm(y ~ x + I(x ^ 2) + I(x ^ 3) + I(x ^ 4) + I(x ^ 5) + I(x ^ 6)
+ I(x ^ 7) + I(x ^ 8) + I(x ^ 9) + I(x ^ 10))
summary(fit_perf)
xplot = seq(0, 10, by = 0.1)
lines(xplot, predict(fit, newdata = data.frame(x = xplot)),
col = "dodgerblue", lwd = 2, lty = 1)
xplot = seq(0, 10, by = 0.1)
lines(xplot, predict(fit, newdata = data.frame(x = xplot)),
col = "dodgerblue", lwd = 2, lty = 1)
+lines(xplot, predict(fit, newdata = data.frame(x = xplot)),
col = "dodgerblue", lwd = 2, lty = 1)
xplot = seq(0, 10, by = 0.1)
+lines(xplot, predict(fit, newdata = data.frame(x = xplot)),
col = "dodgerblue", lwd = 2, lty = 1)
xplot = seq(0, 10, by = 0.1)
lines(xplot, predict(fit, newdata = data.frame(x = xplot)),
col = "dodgerblue", lwd = 2, lty = 1)
xplot = seq(0, 10, by = 0.1)
lines(xplot, predict(fit, newdata = data.frame(x = xplot)),
col = "dodgerblue", lwd = 2, lty = 1)
lines(xplot, predict(fit, newdata = data.frame(x = xplot)),
col = "dodgerblue", lwd = 2, lty = 1)
lines(xplot, predict(fit_perf, newdata = data.frame(x = xplot)),
col = "darkorange", lwd = 2, lty = 2)
plot(xplot)
getwd()
xplot = seq(0, 10, by = 0.1)
lines(xplot, predict(fit, newdata = data.frame(x = xplot)),
col = "dodgerblue", lwd = 2, lty = 1)
fit
predict(fit)
predict(fit, newdata = data.frame(x = xplot))
xplot
plot(xplot,predict(fit, newdata = data.frame(x = xplot)))
set.seed(1234)
x = seq(0, 10)
y = 3 + x + 4 * x ^ 2 + rnorm(11, 0, 20)
plot(x, y, ylim = c(-300, 400), cex = 2, pch = 20)
fit = lm(y ~ x + I(x ^ 2))
#summary(fit)
fit_perf = lm(y ~ x + I(x ^ 2) + I(x ^ 3) + I(x ^ 4) + I(x ^ 5) + I(x ^ 6)
+ I(x ^ 7) + I(x ^ 8) + I(x ^ 9) + I(x ^ 10))
xplot = seq(0, 10, by = 0.1)
lines(xplot, predict(fit, newdata = data.frame(x = xplot)),
col = "dodgerblue", lwd = 2, lty = 1)
lines(xplot, predict(fit_perf, newdata = data.frame(x = xplot)),
col = "darkorange", lwd = 2, lty = 2)
set.seed(1234)
x = seq(0, 10)
y = 3 + x + 4 * x ^ 2 + rnorm(11, 0, 20)
plot(x, y, ylim = c(-300, 400), cex = 2, pch = 20)
fit = lm(y ~ x + I(x ^ 2))
#summary(fit)
fit_perf = lm(y ~ x + I(x ^ 2) + I(x ^ 3) + I(x ^ 4) + I(x ^ 5) + I(x ^ 6)
+ I(x ^ 7) + I(x ^ 8) + I(x ^ 9) + I(x ^ 10))
xplot = seq(0, 10, by = 0.1)
lines(xplot, predict(fit, newdata = data.frame(x = xplot)),
col = "dodgerblue", lwd = 2, lty = 1)
lines(xplot, predict(fit_perf, newdata = data.frame(x = xplot)),
col = "darkorange", lwd = 2, lty = 2)
knitr::opts_chunk$set(echo = TRUE)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data("SAheart")
library(ElemStatLearn)
data("SAheart")
library(ElemStatLearn)
data("SAheart")
head(SAheart)
chd_mod_ldl = glm(chd ~ ldl, data = SAheart, family = binomial)
plot(jitter(chd, factor = 0.1) ~ ldl, data = SAheart, pch = 20,
ylab = "Probability of CHD", xlab = "Low Density Lipoprotein Cholesterol")
grid()
curve(predict(chd_mod_ldl, data.frame(ldl = x), type = "response"),
add = TRUE, col = "dodgerblue", lty = 2)
coef(summary(chd_mod_ldl))
chd_mod_additive = glm(chd~., data= SAheart, family = binomial)
chd_mod_additive = glm(chd~., data= SAheart, family = binomial)
-2* as.numeric(logLik(chd_mod_ldl) - logLik(chd_mod_additive))
anova(chd_mod_ld, chd_mod_additive)
#LRT refers likelihood-ratio test
anova(chd_mod_ldl, chd_mod_additive, test = "LRT")
chd_mod_selected =step(chd_mod_additive, trace =0)
coef(chd_mod_selected)
anova(chd_mod_selected, chd_mod_additive, test = "LRT")
confint(chd_mod_selected, level=0.99)
eta_hat =predict(chd_mod_selected, new_obs, se.fit = TRUE, type = "link")
new_obs = data.frame(
sbp = 148.0,
tobacco = 5,
ldl = 12,
adiposity = 31.23,
famhist = "Present",
typea = 47,
obesity = 28.50,
alcohol = 23.89,
age = 60
)
eta_hat =predict(chd_mod_selected, new_obs, se.fit = TRUE, type = "link")
eta_hat
z_crit = round(qnorm(0.975), 2)
round(z_crit, 2)
eta_hat$fit + c(-1,1)*z_crit * eta_hat$se.fit
boot:inv.logit(eta_hat$fit + c(-1,1)*z_crit * eta_hat$se.fit)
boot::inv.logit(eta_hat$fit + c(-1,1)*z_crit * eta_hat$se.fit)
chd_mod_interaction = glm(chd~alcohol + ldl + famhist + typea + age + ldl:famhist, data =SAheart, family = binomial)
summary(chd_mod_interaction)
chd_mod_int_quad = glm(chd~alcohol +ldl + famhist +typea +age + ldl:famhist + I(ldl^2), family = binomial, data=SAheart)
summary(chd_mod_int_quad)
devaince(chd_mod_ldl)
deviance(chd_mod_ldl)
deviance(chd_mod_selected)
deviance(chd_mod_additive)
install.packages("kernlab")
library(kernlab)
data("spam")
tibble:: as.tibble(spam)
set.seed(42)
spam_idx = sample(nrow(spam), 1000)
spam_trn = spam[spam_idx,]
spam_tst = spam[-spam_idx,]
fit_caps = glm(type ~ capitalTotal,
data = spam_trn, family = binomial)
fit_selected = glm(type ~ edu + money + capitalTotal + charDollar,
data = spam_trn, family = binomial)
fit_additive = glm(type ~ .,
data = spam_trn, family = binomial)
fit_over = glm(type ~ capitalTotal * (.),
data = spam_trn, family = binomial, maxit = 50)
coef(fit_selected)
mean(ifelse(predict(fit_caps) > 0 , "spam", "nonspam")!=spam_trn$type)
mean(ifelse(predict(fit_caps) > 0 , "spam", "nonspam")!=spam_trn$type)
mean(ifelse(predict(fit_selected) > 0, "spam", "nonspam") != spam_trn$type)
mean(ifelse(predict(fit_selected) > 0, "spam", "nonspam") != spam_trn$type)
mean(ifelse(predict(fit_caps) > 0 , "spam", "nonspam")!=spam_trn$type)
mean(ifelse(predict(fit_selected) > 0, "spam", "nonspam") != spam_trn$type)
mean(ifelse(predict(fit_selected) > 0, "spam", "nonspam") != spam_trn$type)
mean(ifelse(predict(fit_additive) > 0, "spam", "nonspam") != spam_trn$type)
mean(ifelse(predict(fit_over) > 0, "spam", "nonspam") != spam_trn$type)
library(boot)
set.seed(1)
cv.glm(spam_trn, fit_caps, K=5)$delta[1]
cv.glm(spam_trn, fit_selected, K = 5)$delta[1]
cv.glm(spam_trn, fit_additive, K = 5)$delta[1]
cv.glm(spam_trn, fit_over, K = 5)$delta[1]
